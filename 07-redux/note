redux

1 redux组件安装
npm install --save react-redux
npm install --save-dev redux-devtools

2 redux简介
2.1 redux对于javascript应用而言是一个可预测状态的容器。换言之，它是一个应用数据流框架，
而不是传统的像underscore.js或是AngularJs那样的库或者框架。

redux最主要是应用状态的管理。简言之，redux用一个单独的常量状态树（对象）保存这一整个应用的状态，这个
对象不能直接被改变。当一些数据变化了，一个新的对象就会被创建（使用actions和reducers）。

2.2 设计和使用的三大原则
  2.2.1 state 以单一对象存储在store对象中
  2.2.2 state只读
  2.2.3 使用纯函数reducer执行state更新

2.3 redux 与 flux 的差异
  2.3.1 redux与flux很像。主要区别在于flux有多个可以改变应用状态的store,它通过事件来触发这些变化。组件可以订阅这些事件来和当前状态同步。
    redux只有一个store
  2.3.2 redux没有分发器dispatcher，但在flux中dispatcher被用来传递数据到注册的回调事件。另一个不同是flux中有很多扩展是可用，这也带来了一些混乱与矛盾。

3 redux核心API
//引用必要组件：
import {createStore, combineReducers} from 'redux'

//生成store

const store = createStore(reducer, state初始状态[可选])

//取得当前时刻的state
const state = store.getState()


//发出action
store.dispatch({
	type:'ADD_TODO',
	payload: 'Learn Redux'
})

//设置监听函数（当store改变时会自动调用回调函数）
store.subscribe(callback)

4 redux核心API reducer
reducer函数最重要的特征是：它是一个纯函数。也就是说，只要是同样的输入，必定得到同样的输出。
纯函数的约束条件：
  * 不得改写参数
  * 不能调用系统I/O的API
  * 不能调用Date.now()或者Math.random()等不纯的方法，因为每次会得到不一样的结果

reducer函数里面不能改变state，必须返回一个全新的对象，请参考下面的写法。
// state是一个对象
function reducer(state, action){
	return Object.assign({}, state, {thingToChange})            //深拷贝 {thingToChange} 到 {}
	//或者
	return {...state, ...newState}          // ES6写法 //数组深拷贝 ...
}

// state是一个数组
function reducer(state, action){
	return [...state, newItem]

}


reducer写法一：
const chatReducer = (state=defaultState, action={})=>{
	const {type, payload} action;
	switch(type){
		case 'ADD_CHAT':
			return Object.assign({}, state, {
				chatLog: state.chatLog.concat(payload)
			})
		default:
			return state
	}
}

reducer写法二：
前提条件：如果不同的action所处理的属性之间没有联系，我们可以把reducer函数拆分。不同的函数负责处理不同属性，最终把它们合并成一个大
的reducer即可。

const reducer = combineReducers({
	a: functionA,
	b: functionB,
	c: functionC
})









